/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    TreeNode* solve(vector<int>& vec,int s,int e) {
        if(s > e) return NULL;
        int mid = ( s + e ) / 2;
        TreeNode* curr = new TreeNode(vec[mid]);
        curr->left = solve(vec,s,mid-1);
        curr->right = solve(vec,mid+1,e);
        return curr;
    }

    TreeNode* sortedListToBST(ListNode* head) {
        vector<int> vec;
        ListNode* curr = head;
        while(curr != NULL) {
            vec.push_back(curr->val);
            curr = curr->next;
        }
        int len = vec.size();
        return solve(vec,0,len-1);
    }
};
