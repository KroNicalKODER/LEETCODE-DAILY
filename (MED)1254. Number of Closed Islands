class Solution {
public:
    int row;
    int col;
    bool inBound(int x,int y) {
        if(x >= 0 && x < row && y >= 0 && y < col) return true;
        return false;
    }

    bool trueAtBoundary(vector<vector<bool>>& grid){
        for(int i=0;i<row;i++) {
            if(grid[i][col-1] == true) return true;
            if(grid[i][0] == true) return true;
        }

        for(int i=0;i<col;i++) {
            if(grid[row-1][i] == true) return true;
            if(grid[0][i] == true) return true;
        }

        return false;
    }

    void resetBoundary(vector<vector<bool>>& grid){
        for(int i=0;i<row;i++) {
            grid[i][col-1] = false;
            grid[i][0] = false;
        }

        for(int i=0;i<col;i++) {
            grid[row-1][i] = false;
            grid[0][i] = false;
        }
    }

    void solve(vector<vector<int>>& grid,vector<vector<bool>>& vis,int x,int y) {
        if(!inBound(x,y)) return;
        if(vis[x][y] == true || grid[x][y] == 1) return;
        vis[x][y] = true;
        solve(grid,vis,x-1,y);
        solve(grid,vis,x+1,y);
        solve(grid,vis,x,y-1);
        solve(grid,vis,x,y+1);

    }
    int closedIsland(vector<vector<int>>& grid) {
        int ans = 0;
        row = grid.size();
        col = grid[0].size();

        vector<vector<bool>> vis(row,vector<bool>(col));
        for(int i=1;i<row-1;i++){
            for(int j=1;j<col-1;j++){
                if(vis[i][j]==false && grid[i][j]==0) {
                    solve(grid,vis,i,j);
                    if(!trueAtBoundary(vis)){
                        ans++;
                    }
                    else resetBoundary(vis);
                }
            }
        }
        return ans;
    }
};
