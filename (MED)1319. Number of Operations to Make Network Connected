class Solution {
public:

    void dfs(vector<vector<int>>& graph, int curr , vector<bool>& vis){

        for(auto child : graph[curr]) {
            if(!vis[child]){
                vis[child] = 1;
                dfs(graph,child,vis);
            }
        }

    }

    int makeConnected(int n, vector<vector<int>>& connections) {
        if( n-1 > connections.size() ) return -1;
        int comp = 0;
        vector<vector<int>> graph(n);
        for(auto edge : connections){
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        vector<bool> vis(n,false);
        for(int i=0;i<n;i++){
            if(!vis[i]) {
                vis[i] = 1;
                dfs(graph,i,vis);
                comp++;
            }
        }
        return comp-1;
    }
};
