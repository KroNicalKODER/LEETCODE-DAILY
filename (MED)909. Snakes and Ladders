class Solution {
public:
int n;
    pair<int,int> toPos(int val){
        int row = (val-1) / n;
        int col = (val-1) % n;
        if(row & 1) {
            col = n - 1 - col;
        }
        return make_pair(row,col);
    }
    int snakesAndLadders(vector<vector<int>>& board) {
        reverse(board.begin(),board.end());
        n = board.size();
        queue<pair<int,int>> qu;
        qu.push(make_pair(1,0));
        vector<bool> vis ((n * n) + 1,false);

        while(!qu.empty()){
            pair<int,int> frontEle = qu.front();
            qu.pop();
            int currSqr = frontEle.first;
            int currMov = frontEle.second;
            for(int i=1;i<=6;i++){
                int nxtSquare = currSqr + i;
                pair<int,int> coor = toPos(nxtSquare);
                if(board[coor.first][coor.second] != -1) {
                    nxtSquare = board[coor.first][coor.second];
                }
                if(nxtSquare == n*n) return currMov + 1;
                if(!vis[nxtSquare]){
                    vis[nxtSquare] = true;
                    qu.push(make_pair(nxtSquare,currMov+1));
                }
            }    
        }
        return -1;
    }
};
