/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* cloneGraph(Node* node) {
        if(node==NULL) return NULL;

        unordered_map<Node*,bool> vis;
        queue<Node*> qu;
        qu.push(node);

        Node* root = new Node(node->val);
        map<Node*,Node*> orToCpy;
        orToCpy[node] = root;
        
        while(!qu.empty()){
            Node* curr = qu.front();
            qu.pop();
            for(auto itr: curr -> neighbors){
                if(!orToCpy[itr]){
                    orToCpy[itr] = new Node(itr -> val, {});
                    qu.push(itr);
                }
                orToCpy[curr] -> neighbors.push_back(orToCpy[itr]);
            }
        }
        return orToCpy[node];
    }
};
